services:
  app:
    container_name: admissions
    restart: unless-stopped
    depends_on:
      database:
        condition: service_healthy
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8888:8888"
    command: ./admissions
    develop:
      watch:
        - action: sync
          path: ./ui/dist
          target: /ui/dist
        - action: rebuild
          path: ./cmd
        - action: rebuild
          path: ./internal
        - action: rebuild
          path: ./pkg

  database:
    container_name: database
    image: postgres:latest
    profiles: [ dev ]
    restart: unless-stopped
    environment:
      POSTGRES_USER: l2shdev
      POSTGRES_PASSWORD: l2sh
      POSTGRES_DB: admissions
    volumes:
      - database:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 1s
      timeout: 5s
      retries: 10

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:latest
    profiles: [ dev ]
    restart: unless-stopped
    depends_on:
      database:
        condition: service_healthy
    environment:
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      GUNICORN_ACCESS_LOGFILE: /dev/null
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "5050:80"

  migrate:
    image: migrate/migrate
    container_name: migrate
    volumes:
      - ./migrations:/migrations
    entrypoint: [ "sh", "-c", "until nc -z -v -w30 $(cat /run/secrets/database_host) 5432; do echo waiting for database; sleep 1; done; migrate -path=/migrations -database=$(cat /run/secrets/database_uri) up" ]
    secrets:
      - database_uri
      - database_host

secrets:
  database_uri:
    file: ./secrets/database_uri.txt
  database_host:
    file: ./secrets/database_host.txt

volumes:
  pgadmin:
  database:
